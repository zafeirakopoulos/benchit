# -*- coding: utf-8 -*-

#import multiprocessing
#thepool = multiprocessing.Pool(4)
#import multiprocessing.dummy
#hepool = multiprocessing.dummy.Pool(4)
#from IPython.parallel import Client
from cStringIO import StringIO
import itertools

debug = False
time_enum_fund_par = False
run_parallel = False
journal_of_enum_problems = []
log_enum_problems = False
journal_of_multiplications = []
log_multiplications = False
journal_of_additions = []
log_additions = False
report = False
determinants = False
benchmark = True
loglevel = 4
just_symb_cones = False

def vector_is_forward(v):
    for vi in v:
        if vi != 0:
            if vi > 0:
                return 1
            if vi < 0:
                return 0
    return 1

# the function flip as given in the article
# s is a sign
# I is a 0-1 vector
# V is a list of vectors
# q is a vector
def flip(C):
    s,I,V,q = C
    # we have to use lists instead of generators here, because zip does not work for generators
    J = [ not vector_is_forward(v) for v in V ] # 1 = backward, 0 = forward
    Jpm = [ -1 if Ji else 1 for Ji in J ] # -1 = backward, 1 = forward
    _s = prod(Jpm) * s
    _I = vector([ 1 if Ii != Ji else 0 for (Ii,Ji) in zip(I,J) ])
    _V = tuple(( Jpmi * v for (Jpmi,v) in zip(Jpm,V) ))
    return _s, _I, _V, q

# a vector v
def prim_v(v):
    d = abs(gcd(v))
    w = v.apply_map(lambda vi: vi.divide_knowing_divisible_by(d))
    return w
    #return vector((Integer(vi/d) for vi in v))

# the function prim as given in the article
# a list of vectors V
def prim(V):
    return map(prim_v, V) # use tuples here?

def eliminate_last_coordinate(C,e=0):
    if debug:
        print "in eliminate_last_coordinate"
        print C
    s,I,V,q = C
    k = len(V)
    lambd = len(V[0]) - 1 # note that we have to shift by 1 here because in Sage indicies start at zero
    v = lambda j: q - q[lambd]/(V[j][lambd]) * V[j] ## which sign here??? abs on q[lambd]??
    def ghat(i,j):
        if i == j: # TODO: check if this makes sense for e == 1 as well
            if q[lambd] > 0 or (q[lambd] == 0 and not exists(range(k),lambda j: V[j][lambd] > 0)[0]):
                return -V[j]
            else:
                return V[j]
        else:
            return sgn(V[j][lambd]) * (V[j][lambd] * V[i] - V[i][lambd] * V[j]) # warning: check the first case if q_\lambd = 0
    g = lambda i, j: ghat(i,j)[:-1] # this is Python for dropping the last coordinate
    G = (lambda j: [ g(i,j) for i in xrange(k) ]) if e==0 else (lambda j: [ g(i,j) for i in xrange(k) if j != i])
    def _I(j): # this is ugly. would like a one-liner for this
        theI = copy(I)
        if e == 0:
            theI[j] = 0
        else:
            # this whole thing drops the j-th element of the list I
            theI = theI.list()
            theI.pop(j)
            theI = vector(theI)
        return theI
    def Bplus():
        return [ (s,_I(j),prim(G(j)),v(j)[:-1]) for j in xrange(k) if V[j][lambd] > 0 ]
    def Bminus():
        return [ (s,_I(j),prim(G(j)),v(j)[:-1]) for j in xrange(k) if V[j][lambd] < 0 ]
    def Cprime():
        _V = prim( (w[:-1] for w in V) )
        return (s,I,_V,q[:-1])
    if e == 0:
        if q[lambd] < 0:
            B = Bplus()
        #else:
        #    B = Bminus() + [Cprime()]
        elif q[lambd] > 0: # if q[lambd] >= 0
            B = Bminus() + [Cprime()]
        else: # if q[lambd] == 0
            if exists(range(k),lambda j: V[j][lambd] > 0)[0]:
                B = Bplus()
            else:
                B = Bminus() + [Cprime()]
    else: # if e == 1
        if debug and q[lambd] == 0:
            print "q[lambda] == 0"
        if q[lambd] < 0 or (q[lambd] == 0 and exists(range(k),lambda j: V[j][lambd] > 0)[0]):
            #print q[lambd] < 0
            #print (q[lambd] == 0 and exists(range(k),lambda j: V[j][lambd] > 0))
            if debug:
                print "eliminate_last_coordinate branch 1"
            B = Bplus()
        elif q[lambd] > 0 or (q[lambd] == 0 and exists(range(k),lambda j: V[j][lambd] < 0)[0]):
            if debug:
                print "eliminate_last_coordinate branch 2"
            B = Bminus()
        else: # q[lambd] == 0 and forall(range(k), lambda j: V[j][lambd] == 0)[0]
            if debug:
                print "eliminate_last_coordinate branch 3"
            B = [Cprime()]
    if debug:
        print "BBB"
        print B, q, e, V, k, lambd, q[lambd], [V[j][lambd] for j in range(k)]
    if report:
        print "split one cone into ", len(B)
    return ( flip(C) for C in B )

# takes a list L and groups items into sublists according to the equality test eq
# warning! this has quadratic runtime! this is not good enough if the number of cones gets large
# we need to make cones hashable! (or use red-black trees)
def group_by(L,eq):
    groups = []
    for e in L:
        for g in groups:
            if eq(e,g[0]):
                g.append(e)
                break
        else:
            groups.append([e])
    return groups

def sum_multipliers(group):
    accumulator = 0
    for C in group:
        #print C
        accumulator += C[0]
    return (accumulator,group[0][1],group[0][2],group[0][3])

# a list of symbolic cones L
# TODO: we *have* to parallelize this!
def elim(L,e):
    signed_cones = list(itertools.chain( *( eliminate_last_coordinate(sc,e) for sc in L) ))
    n_before = len(signed_cones)
    print "elim: number of cones before collecting terms: ", n_before
    # note, the iterator signed_cones can only be iterated over once!
    groups = group_by(signed_cones, lambda Ca, Cb: Ca[1:] == Cb[1:])
    #print "groups",groups
    collected_cones = ( sum_multipliers(group) for group in groups )
    result = [ cone for cone in collected_cones if cone[0] != 0 ]
    n_after = len(result)
    print "elim: number of cones after collecting terms: ", n_after
    return (result, n_before, n_after)

# computes f(f(...f(x))) where k is the number of fs
# there *has* to be a better way to write this.
def times(f,k,x):
    tmp = x
    for i in xrange(k):
        tmp = f(tmp)
    return tmp

# a matrix A
# a vector b
def symbolic_cones(A,b,E):
    d = A.ncols()
    m = A.nrows()
    Id = identity_matrix(ZZ,d)
    V = Id.stack(A)
    q = vector( [0 for i in xrange(d)] + [-1 * bi for bi in b] )
    L = [(1,vector(ZZ,d),tuple(V.columns()),q)] # in contrast to the article, we represent V as a tuple not as a matrix
    E = list(E) # clone E
    E.reverse() # iterate through E in reverse order
    log = {}
    if loglevel >= 1:
        log["elim"] = []
    for e in E:
        (L,n_before,n_after) = elim(L,e)
        if loglevel >= 1:
            log["elim"].append((n_before,n_after))
    return (L,log)

def fract(x,e):
    # r = x - floor(x)
    # if r == 0:
    #     return e
    # else:
    #     return r
    if x.is_integral():
        return e
    else:
        return x - floor(x)

def fract_v(v,I):
    # DANGER: mutates v
    #n = len(v)
    #i = 0
    #while i < n:
    #    v.set(i, fract(v[i],I[i]))
    #    i += 1
    #return v
    for i in range(len(v)):
        v.set(i, fract(v[i],I[i]))
    return v
    #return vector([ fract(v[i], I[i]) for i in xrange(len(v))])

def fract_l(v,I):
    pairs = zip(v,I)
    res = []
    for (vi,Ii) in pairs:
        res.append(fract(vi,Ii))
    return res

def fract_simple(v):
    res = []
    for vi in v:
        res.append(vi - floor(vi))
    return res

def H_description_of_affine_hull(V,q):
    if debug:
        print "H description"
        print V
        print q
    P, L, U = V.LU()
    A = L**(-1)*P**(-1)
    k = V.ncols()
    d = V.nrows()
    if d == k:
        # as we assume that V is full rank, this implies that the cone is full dimensional
        # therefore the system describing the affine hull is empty
        return ([],[])
    Ap = A[-(d-k):]
    b = Ap * q
    if debug:
        print Ap
        print b
    # this last part makes sure that the system Ax=b is integral
    m = Ap.nrows()
    multipliers = [ lcm([ Ap[i,j].denominator() for j in range(d) ] + [b[i].denominator()]) for i in range(m) ]
    S = diagonal_matrix(multipliers)
    result = (S*Ap, S*b)
    if debug:
        print result
    return result
    # for i in range(m):
    #     denominators = [ Ap[i,j].denominator() for j in range(d) ] + [b[i].denominator()]
    #     multipliers = lcm(denominators)
    #     diagonal_matrix()
    #     for j in range(d):
    #         Ap[i,j] = multiplier * Ap[i,j]
    #         b[i] = multiplier * b[i]
    # return (Ap,b)

def solve_linear_diophantine_equation_system(A,b):
    # it is crucial that A is a matrix over ZZ. so reconstruct it!
    A = column_matrix(ZZ,A.columns())
    S, Uinv, Vinv = A.smith_form()
    if debug:
        print "in solve linear diophantine system over the integers (i)"
        print A,b
        print S, Uinv, Vinv
    n = A.ncols()
    m = A.nrows()
    p = Uinv * b
    q = vector([ p[i]/S[i][i] for i in range(m) ] + [ 0 for i in range(n-m)])
    r = Vinv * q
    if debug:
        print "in solve linear diophantine system over the integers"
        print A,b
        print S, Uinv, Vinv
        print p
        print q
        print r
    return r

def is_integral(v):
    return reduce(lambda a,b: a and b, [vi.is_integral() for vi in v])

# these two functions help with profiling
def mymult(a,b):
    if log_multiplications:
        journal_of_multiplications.append((a,b))
    return a * b

def myadd(a,b):
    if log_additions:
        journal_of_additions((a,b))
    return a + b

def mult_matrix_vector(m,v):
    # vector is taken to be a list or any other iterable
    result = []
    for row in m.rows():
        accumulator = 0
        pairs = zip(row,v)
        for (mij,vj) in pairs:
            accumulator += mij * vj
            #accumulator = myadd(accumulator, mymult(mij,vj)) # mij * vj # mymult(mij,vj)
        #for vj in v:
        #    accumulator += m[i,j] * vj
        #    j += 1
        result.append(accumulator)
    return result

def sub_vector_vector(v,w):
    result = []
    pairs = zip(v,w)
    for (vi,wi) in pairs:
        result.append(vi-wi)
    return result

def add_vector_vector(v,w):
    result = []
    pairs = zip(v,w)
    for (vi,wi) in pairs:
        result.append(vi+wi)
    return result

# def transform(args):
#     (V, WinvT, qhat, I, q, v) = args
#    return V * fract_v( WinvT*(v-qhat), I) + q

def enumerate_fund_par(C):
    if debug:
        print "in enumerate_fund_par"
        print C
    if time_enum_fund_par:
        print "timing enum fund par"
        time_start = time.time()
    m,I,V,q = C # m is a multiplier now, not just a sign
    k = len(V)
    d = len(V[0])
    # note: in Sage the Smith form is UVW = S, whereas in the draft we use V=USW.
    V = column_matrix(ZZ,V) # turn V from a list into a matrix over ZZ
    p = vector([0 for i in range(d)])
    if time_enum_fund_par:
        time_init = time.time()
        print "init:", time_init - time_start
    if k < d:
        # find an integer point in the affine span
        A,b = H_description_of_affine_hull(V,q)
        p = solve_linear_diophantine_equation_system(A,b)
    if debug:
        print "Enumerate Fund Par"
        print V, q
        print p
    if not is_integral(p):
        return []
    if time_enum_fund_par:
        time_affine_hull = time.time()
        print "affine hull:", time_affine_hull - time_init
    S,Uinv,Winv = V.smith_form()
    if time_enum_fund_par:
        time_smith_form = time.time()
        print "smith form:", time_smith_form - time_affine_hull
    s = [S[i][i] for i in xrange(k)] # we don't need the last d-k 1s: + [1 for i in range(d-k)]
    T = diagonal_matrix([1/s[i] for i in xrange(k)]).augment(zero_matrix(QQ,k,d-k))
    qhat = Uinv * (q - p)
    if time_enum_fund_par:
        print "#points:", prod([s[i] for i in xrange(k)])
    _L = CartesianProduct( *[xrange(s[i]) for i in xrange(k)] )
    if time_enum_fund_par:
        time_cart_prod = time.time()
        print "cartesian product:", time_cart_prod - time_smith_form
    #L = ( vector(v) for v in _L )
    if time_enum_fund_par:
        time_L = time.time()
        print "setup L:", time_L - time_cart_prod
    WinvT = Winv * T
    #WinvT = Winv
    if log_enum_problems:
        global journal_of_enum_problems
        journal_of_enum_problems.append({"V":V.rows(),"WinvT":WinvT.rows(),"q":q.list(),"qhat":qhat.list(),"L":list(_L)})
    # 1: sequential version
    # def _transform(v):
    #     r1 = v - qhat
    #     r2 = WinvT * r1
    #     r3 = fract_v(r2,I)
    #     r4 = V * r3
    #     r5 = r4 + q
    #     return r5
    def _transform(v):
        r1 = sub_vector_vector(v,qhat)
        r2 = mult_matrix_vector(WinvT,r1)
        r3 = fract_l(r2,I)
        r4 = mult_matrix_vector(V,r3)
        r5 = add_vector_vector(r4,q)
        #r = add_vector_vector(mult_matrix_vector(V,fract_l(mult_matrix_vector(WinvT,sub_vector_vector(v,qhat)),I)),q)
        return r5
        #return  V * fract_v( WinvT*(v-qhat), I) + q
    def _transform_for_q_and_p_zero(v):
        r2 = mult_matrix_vector(WinvT,v)
        r3 = fract_l(r2,I)
        r4 = mult_matrix_vector(V,r3)
        #r = add_vector_vector(mult_matrix_vector(V,fract_l(mult_matrix_vector(WinvT,sub_vector_vector(v,qhat)),I)),q)
        return r4
    #result = [ _transform(v) for v in _L ]
    #result = [ _transform_for_q_and_p_zero(v) for v in _L ]
    #result = [ V * fract_v( WinvT*v, I) for v in L ]
    #result = [ V * fract_v( WinvT*(v-qhat), I) + q for v in L ]
    # 2: decorator-based version
    #@parallel(ncpus=4)
    #def transform(v):
    #    return  V * fract_v( WinvT*(v-qhat), I) + q
    #_result = transform(L)
    # the parallel computation returns a list of pairs where the second entry contains the result
    #print _result.next()
    #result = map(lambda thepair: thepair[1], _result)
    # 3a: multiprocessing-based version
    #pool = multiprocessing.dummy.Pool(4)
    #pool = multiprocessing.Pool(4)
    #result = pool.map(transform,L)
    # 3b: multiprocessing-based version
    #pool = multiprocessing.dummy.Pool(4)
    #result = thepool.imap(transform,[ (V,WinvT,qhat,I,q,v) for v in L ],chunksize=100)
    # 4: IPython based version
    #rc = Client()
    #v = rc.load_balanced_view()
    #result = v.map(transform,L)
    # 5: Sequential and modular arithmetic
    # so far: WORKS ONLY IF k == d and q == 0
    sk = s[k-1]
    sprime = [Integer(sk / si) for si in s]
    # using Sage's modular arithmetic turns out to be much slower
    #Zsd = IntegerModRing(sd)
    Wprime = tuple([tuple([ (Winv[j,i] * sprime[i]) for i in xrange(k)]) for j in xrange(k)])
    #Wprime = column_matrix(ZZ,[[ (Winv[i,j] * sprime[j]) % sd for i in xrange(d)] for j in xrange(d)]).transpose()
    qtrans = [ sum([ - Wprime[j][i] * qhat[i]  for i in xrange(k)]) for j in xrange(k) ]
    qfrac = fract_simple(qtrans)
    qint = [ floor(qi) for qi in qtrans ]
    qsummand = q + (1/sk) * V * vector(qfrac) # this vector is rational
    if debug:
        print "qsummand", qsummand, "q", q, "qfrac", qfrac, "qtrans", qtrans, "qhat", qhat
        print "Wprime", Wprime
        print "s", s
    Iprime = [ (I[j] if qfrac[j] == 0 else 0) for j in xrange(k) ]
    def _transform_integral(z):
        innerRes = []
        j = 0
        for qj in qint: # qint has k entries
            inner = 0
            i = 0
            for zi in z: # z should have k entries
                inner += Wprime[j][i] * zi # Wprime[i,j] * vj
                # the following is optional, depending on performance
                #inner = inner % sk
                i += 1
            inner += qj
            inner = inner % sk
            # inner has to be modified according to I
            if inner == 0 and Iprime[j]:
                inner = sk
            innerRes.append(inner)
            j += 1
        outerRes = []
        for l in xrange(d):
            outer = 0
            j = 0
            for innerResi in innerRes:
                outer += V[l,j] * innerResi
                j += 1
            outerRes.append(outer / sk) # outerRes is a rational vector in general
        return add_vector_vector(outerRes,qsummand)
    result = [ _transform_integral(v) for v in _L ]
    if time_enum_fund_par:
        time_transform = time.time()
        print "transform:", time_transform - time_L
    return result

@parallel
def enumerate_fund_par_wrapper(C):
    return (C,enumerate_fund_par(C))

def enumerate_fund_pars(cones):
    return [(C,enumerate_fund_par(C)) for C in cones]

def symbolic_cone_w_fund_par_2_generating_function(CF,sage=1, parent="symbolic"):
    C,F = CF
    m,I,V,q = C # m is a multiplier now, not just a sign
    d = len(V[0])
    if sage:
        if parent=="symbolic":
            var(["z"+str(i+1) for i in range(d)])
            num = sum([ prod([SR("z"+str(i))**t[i] for i in range(d)]) for t in F])
            den = prod([ (1- prod([SR("z"+str(i))**c[i] for i in range(d)]) ) for c in V])
            gf = m * num/den
            return gf
        if parent=="fraction field":
            ring = PolynomialRing(QQ,["z"+str(i+1) for i in range(d)])
            num = sum([ prod([ring.gen(i)**t[i] for i in range(d)]) for t in F])
            den = prod([ (1- prod([ring.gen(i)**c[i] for i in range(d)]) ) for c in V])
            N = num(*(list(ring.gens())))
            D = den(*(list(ring.gens())))
            F = FractionField(ring)
            gf = m * F(N/D)
            return gf
    else: # return gf as string
        # the parallel computation returns a list of pairs where the second entry contains the result, hence the [1] in "t[1][i]"
        #num_monomials = [reduce(lambda a,b: a+"*"+b, [ "z%d**(%d)" % (i+1,t[1][i]) for i in range(d) ]) for t in F]
        def stringify_monomial(z):
            return "*".join(("z%d**(%d)" % (i+1,z[i]) for i in xrange(d)))
        num = "+".join((stringify_monomial(t) for t in F))
        den = "*".join(( "(1-%s)" % stringify_monomial(c) for c in V))
        return ("(%d*(%s)/(%s))" % (m,num,den))

import time

# the sage parameter determines whether the rational function representation is returned as a string or as a sage rational function
def solve(A,b,E,logfile1=None,logfile2=None):
    if loglevel >= 1:
        print "START SOLVE"
    A = matrix(ZZ,A)
    b = vector(ZZ,b)
    report = {"A": A, "b": b, "E": E}
    if loglevel >= 1:
        report["benchmark"] = {}
        time_start = time.time()
        print "Compute scs"
    (scs,log) = symbolic_cones(A,b,E)
    if loglevel >= 1:
        time_scones = time.time()
        t_scones = time_scones - time_start
        report["benchmark"]["symbolic cone computation"] = t_scones
        report["symbolic cones"] = scs
        print "symbolic cones computation took %s" % t_scones
        print "total number of symbolic cones is %d" % len(scs)
    if loglevel >= 2:
        print "determinants"
        sum_of_determinants = 0
        report["determinants"] = []
        for c in scs:
            d = determinant_of_symbolic_cone(c)
            report["determinants"].append(d)
            print d
            sum_of_determinants += d
        print "Sum of Determinants"
        print sum_of_determinants
        report["sum of determinants"] = sum_of_determinants
    report = dict(report, **log)
    if just_symb_cones:
        return ("?",scs,report)
    if logfile1:
        print "writing", logfile1
        spit_json(plainify(report), logfile1)
    if loglevel >= 1:
        time_start = time.time()
        print "Compute scsfp"
    if run_parallel:
        print "...in parallel"
        scsfp = enumerate_fund_par_wrapper(( (sc,) for sc in scs))
        scsfp = map(lambda thepair: thepair[1], scsfp)
    else:
        print "...sequentially"
        scsfp = enumerate_fund_pars(scs)
    if loglevel >= 1:
        time_fps = time.time()
        t_fpar = time_fps - time_start
        report["symbolic cones with fund par"] = scsfp
        report["benchmark"]["fund par enumeration"] = t_fpar
        print "fund par enumeration took %s" % t_fpar
        print "Compute gfs"
    gfs = map(lambda c: symbolic_cone_w_fund_par_2_generating_function(c,0), scsfp)
    if loglevel >= 1:
        time_genfun = time.time()
        t_genfun = time_genfun - time_fps
        report["generating functions"] = gfs
        report["benchmark"]["generating function computation"] = t_genfun
        print "generating function computation took %s" % t_genfun
        print "Compute gf"
    gf = ("+".join(gfs) if len(gfs) != 0 else "0")
    if loglevel >= 1:
        time_summation = time.time()
        t_sum = time_summation - time_genfun
        t_total = t_scones + t_fpar + t_genfun + t_sum
        report["rational function"] = gf
        report["benchmark"]["summation"] = t_sum
        report["benchmark"]["total"] = t_total
        print "summation took %s" % t_sum
        print "total time taken %s" % t_total
    if logfile2:
        print "writing", logfile2
        spit_json(plainify(report),logfile2)
    return gf, scs, report

def determinant_of_symbolic_cone(C):
    s,I,V,q = C
    k = len(V)
    m = matrix(ZZ,V)
    S,Uinv,Winv = m.smith_form()
    s = [S[i][i] for i in xrange(k)]
    return prod(s)

ret=solve({{A}},{{b}},{{E}})
print ret[0]
